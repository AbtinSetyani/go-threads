// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: threads.proto

package threads_pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Record is a thread record containing link data.
type Record struct {
	// recordNode is the top-level node's raw data.
	RecordNode []byte `protobuf:"bytes,1,opt,name=recordNode,proto3" json:"recordNode,omitempty"`
	// eventNode is the event node's raw data.
	EventNode []byte `protobuf:"bytes,2,opt,name=eventNode,proto3" json:"eventNode,omitempty"`
	// headerNode is the header node's raw data.
	HeaderNode []byte `protobuf:"bytes,3,opt,name=headerNode,proto3" json:"headerNode,omitempty"`
	// bodyNode is the body node's raw data.
	BodyNode []byte `protobuf:"bytes,4,opt,name=bodyNode,proto3" json:"bodyNode,omitempty"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{0}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetRecordNode() []byte {
	if m != nil {
		return m.RecordNode
	}
	return nil
}

func (m *Record) GetEventNode() []byte {
	if m != nil {
		return m.EventNode
	}
	return nil
}

func (m *Record) GetHeaderNode() []byte {
	if m != nil {
		return m.HeaderNode
	}
	return nil
}

func (m *Record) GetBodyNode() []byte {
	if m != nil {
		return m.BodyNode
	}
	return nil
}

// Log contains information about a thread log.
type Log struct {
	ID        *ProtoPeerID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=ProtoPeerID" json:"ID,omitempty"`
	PubKey    *ProtoPubKey `protobuf:"bytes,2,opt,name=pubKey,proto3,customtype=ProtoPubKey" json:"pubKey,omitempty"`
	FollowKey []byte       `protobuf:"bytes,3,opt,name=followKey,proto3" json:"followKey,omitempty"`
	ReadKey   []byte       `protobuf:"bytes,4,opt,name=readKey,proto3" json:"readKey,omitempty"`
	Addrs     []ProtoAddr  `protobuf:"bytes,5,rep,name=addrs,proto3,customtype=ProtoAddr" json:"addrs,omitempty"`
	Heads     []ProtoCid   `protobuf:"bytes,6,rep,name=heads,proto3,customtype=ProtoCid" json:"heads,omitempty"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{1}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Log.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return m.Size()
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetFollowKey() []byte {
	if m != nil {
		return m.FollowKey
	}
	return nil
}

func (m *Log) GetReadKey() []byte {
	if m != nil {
		return m.ReadKey
	}
	return nil
}

// PushRequest is used as a record envelope for thread orchestration.
type PushRequest struct {
	// header is the header message.
	Header *PushRequest_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// threadID is the target thread's ID.
	ThreadID *ProtoThreadID `protobuf:"bytes,2,opt,name=threadID,proto3,customtype=ProtoThreadID" json:"threadID,omitempty"`
	// logID is the target log's ID.
	LogID *ProtoPeerID `protobuf:"bytes,3,opt,name=logID,proto3,customtype=ProtoPeerID" json:"logID,omitempty"`
	// record is the actual record payload.
	Record *Record `protobuf:"bytes,4,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{2}
}
func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(m, src)
}
func (m *PushRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

func (m *PushRequest) GetHeader() *PushRequest_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PushRequest) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

// Header holds sender and key information.
type PushRequest_Header struct {
	// from is the sender's peerID.
	From *ProtoPeerID `protobuf:"bytes,1,opt,name=from,proto3,customtype=ProtoPeerID" json:"from,omitempty"`
	// signature is the signature of the payload.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// key is the sender's public key used to sign the payload.
	Key *ProtoPubKey `protobuf:"bytes,3,opt,name=key,proto3,customtype=ProtoPubKey" json:"key,omitempty"`
	// followKey allows recipients to follow links in an invite.
	FollowKey []byte `protobuf:"bytes,4,opt,name=followKey,proto3" json:"followKey,omitempty"`
	// readKeyLogID allows recipients to decrypt invites from a join.
	ReadKeyLogID *ProtoPeerID `protobuf:"bytes,5,opt,name=readKeyLogID,proto3,customtype=ProtoPeerID" json:"readKeyLogID,omitempty"`
}

func (m *PushRequest_Header) Reset()         { *m = PushRequest_Header{} }
func (m *PushRequest_Header) String() string { return proto.CompactTextString(m) }
func (*PushRequest_Header) ProtoMessage()    {}
func (*PushRequest_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{2, 0}
}
func (m *PushRequest_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushRequest_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushRequest_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushRequest_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest_Header.Merge(m, src)
}
func (m *PushRequest_Header) XXX_Size() int {
	return m.Size()
}
func (m *PushRequest_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest_Header.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest_Header proto.InternalMessageInfo

func (m *PushRequest_Header) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PushRequest_Header) GetFollowKey() []byte {
	if m != nil {
		return m.FollowKey
	}
	return nil
}

// PushReply is the response from a PushRequest.
type PushReply struct {
	// newAddr is a new address for the sender's log.
	NewAddr *ProtoAddr `protobuf:"bytes,1,opt,name=newAddr,proto3,customtype=ProtoAddr" json:"newAddr,omitempty"`
}

func (m *PushReply) Reset()         { *m = PushReply{} }
func (m *PushReply) String() string { return proto.CompactTextString(m) }
func (*PushReply) ProtoMessage()    {}
func (*PushReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{3}
}
func (m *PushReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReply.Merge(m, src)
}
func (m *PushReply) XXX_Size() int {
	return m.Size()
}
func (m *PushReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReply.DiscardUnknown(m)
}

var xxx_messageInfo_PushReply proto.InternalMessageInfo

// PullRequest is used to request records from a log address.
type PullRequest struct {
	// header is the message header.
	Header *PullRequest_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// threadID is the target thread's ID.
	ThreadID *ProtoThreadID `protobuf:"bytes,2,opt,name=threadID,proto3,customtype=ProtoThreadID" json:"threadID,omitempty"`
	// logID is the target log's ID.
	LogID *ProtoPeerID `protobuf:"bytes,3,opt,name=logID,proto3,customtype=ProtoPeerID" json:"logID,omitempty"`
	// offset tells the recipient at which point to consider records new for the reply.
	Offset *ProtoCid `protobuf:"bytes,4,opt,name=offset,proto3,customtype=ProtoCid" json:"offset,omitempty"`
	// limit indicates the max number of records to return.
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *PullRequest) Reset()         { *m = PullRequest{} }
func (m *PullRequest) String() string { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()    {}
func (*PullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{4}
}
func (m *PullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequest.Merge(m, src)
}
func (m *PullRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequest proto.InternalMessageInfo

func (m *PullRequest) GetHeader() *PullRequest_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PullRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// Header holds sender information.
type PullRequest_Header struct {
	From *ProtoPeerID `protobuf:"bytes,1,opt,name=from,proto3,customtype=ProtoPeerID" json:"from,omitempty"`
}

func (m *PullRequest_Header) Reset()         { *m = PullRequest_Header{} }
func (m *PullRequest_Header) String() string { return proto.CompactTextString(m) }
func (*PullRequest_Header) ProtoMessage()    {}
func (*PullRequest_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{4, 0}
}
func (m *PullRequest_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullRequest_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullRequest_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullRequest_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequest_Header.Merge(m, src)
}
func (m *PullRequest_Header) XXX_Size() int {
	return m.Size()
}
func (m *PullRequest_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequest_Header.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequest_Header proto.InternalMessageInfo

// PullReply contains records requested with a PullRequest.
type PullReply struct {
	// records are the result of the request.
	Records []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *PullReply) Reset()         { *m = PullReply{} }
func (m *PullReply) String() string { return proto.CompactTextString(m) }
func (*PullReply) ProtoMessage()    {}
func (*PullReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{5}
}
func (m *PullReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullReply.Merge(m, src)
}
func (m *PullReply) XXX_Size() int {
	return m.Size()
}
func (m *PullReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PullReply.DiscardUnknown(m)
}

var xxx_messageInfo_PullReply proto.InternalMessageInfo

func (m *PullReply) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

// GetRequest is used to request thread logs.
type GetRequest struct {
	// header is the message header.
	Header *GetRequest_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// threadID is the target thread's ID.
	ThreadID *ProtoThreadID `protobuf:"bytes,2,opt,name=threadID,proto3,customtype=ProtoThreadID" json:"threadID,omitempty"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{6}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetHeader() *GetRequest_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

// Header holds sender information.
type GetRequest_Header struct {
	From *ProtoPeerID `protobuf:"bytes,1,opt,name=from,proto3,customtype=ProtoPeerID" json:"from,omitempty"`
}

func (m *GetRequest_Header) Reset()         { *m = GetRequest_Header{} }
func (m *GetRequest_Header) String() string { return proto.CompactTextString(m) }
func (*GetRequest_Header) ProtoMessage()    {}
func (*GetRequest_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{6, 0}
}
func (m *GetRequest_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest_Header.Merge(m, src)
}
func (m *GetRequest_Header) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest_Header.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest_Header proto.InternalMessageInfo

// GetReply contains logs requested with a GetRequest.
type GetReply struct {
	// logs are the result of the request.
	Logs []*Log `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{7}
}
func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(m, src)
}
func (m *GetReply) XXX_Size() int {
	return m.Size()
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func init() {
	proto.RegisterType((*Record)(nil), "threads.pb.Record")
	proto.RegisterType((*Log)(nil), "threads.pb.Log")
	proto.RegisterType((*PushRequest)(nil), "threads.pb.PushRequest")
	proto.RegisterType((*PushRequest_Header)(nil), "threads.pb.PushRequest.Header")
	proto.RegisterType((*PushReply)(nil), "threads.pb.PushReply")
	proto.RegisterType((*PullRequest)(nil), "threads.pb.PullRequest")
	proto.RegisterType((*PullRequest_Header)(nil), "threads.pb.PullRequest.Header")
	proto.RegisterType((*PullReply)(nil), "threads.pb.PullReply")
	proto.RegisterType((*GetRequest)(nil), "threads.pb.GetRequest")
	proto.RegisterType((*GetRequest_Header)(nil), "threads.pb.GetRequest.Header")
	proto.RegisterType((*GetReply)(nil), "threads.pb.GetReply")
}

func init() { proto.RegisterFile("threads.proto", fileDescriptor_f2ba358bb2150022) }

var fileDescriptor_f2ba358bb2150022 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xc4, 0xb1, 0x9b, 0xde, 0xa4, 0xaa, 0xbe, 0x51, 0x3f, 0x88, 0x22, 0x70, 0x82, 0x0b,
	0x6a, 0x85, 0x68, 0x2a, 0xb5, 0x14, 0xc1, 0x92, 0x12, 0xa9, 0x44, 0x54, 0xa8, 0x1a, 0xf1, 0x02,
	0x71, 0x3d, 0x71, 0x22, 0xdc, 0x4e, 0xf0, 0x0f, 0x55, 0xb6, 0x2c, 0xd8, 0xb0, 0xe1, 0x15, 0x78,
	0x07, 0x1e, 0x00, 0x76, 0x2c, 0xbb, 0x44, 0x59, 0x44, 0x90, 0xbe, 0x04, 0x4b, 0x34, 0x77, 0x6c,
	0xc7, 0x75, 0x1a, 0x89, 0x0a, 0x89, 0x5d, 0xee, 0x3d, 0xe7, 0x76, 0xee, 0x39, 0xe7, 0x5a, 0x85,
	0x95, 0xb0, 0xef, 0xf3, 0xae, 0x13, 0xb4, 0x86, 0xbe, 0x08, 0x05, 0x85, 0xb4, 0xb4, 0xeb, 0x5b,
	0xee, 0x20, 0xec, 0x47, 0x76, 0xeb, 0x58, 0x9c, 0x6c, 0xbb, 0xc2, 0x15, 0xdb, 0x48, 0xb1, 0xa3,
	0x1e, 0x56, 0x58, 0xe0, 0x2f, 0x35, 0x6a, 0xbd, 0x23, 0x60, 0x30, 0x7e, 0x2c, 0x7c, 0x87, 0x9a,
	0x00, 0x3e, 0xfe, 0x7a, 0x29, 0x1c, 0x5e, 0x23, 0x4d, 0xb2, 0x59, 0x65, 0x99, 0x0e, 0xbd, 0x05,
	0xcb, 0xfc, 0x2d, 0x3f, 0x0d, 0x11, 0x2e, 0x22, 0x3c, 0x6b, 0xc8, 0xe9, 0x3e, 0xef, 0x3a, 0xdc,
	0x47, 0x58, 0x53, 0xd3, 0xb3, 0x0e, 0xad, 0x43, 0xd9, 0x16, 0xce, 0x08, 0xd1, 0x12, 0xa2, 0x69,
	0x6d, 0x9d, 0x13, 0xd0, 0x0e, 0x85, 0x4b, 0x1b, 0x50, 0xec, 0xb4, 0xd5, 0xcb, 0xfb, 0xab, 0xe3,
	0x49, 0xa3, 0x72, 0x24, 0x77, 0x3c, 0xe2, 0xdc, 0xef, 0xb4, 0x59, 0xb1, 0xd3, 0xa6, 0x1b, 0x60,
	0x0c, 0x23, 0xfb, 0x05, 0x1f, 0xa9, 0xf7, 0xb3, 0x24, 0x6c, 0xb3, 0x18, 0x96, 0xbb, 0xf6, 0x84,
	0xe7, 0x89, 0x33, 0xc9, 0x55, 0xcb, 0xcc, 0x1a, 0xb4, 0x06, 0x4b, 0xd2, 0x2f, 0x89, 0xa9, 0x55,
	0x92, 0x92, 0xae, 0x83, 0xde, 0x75, 0x1c, 0x3f, 0xa8, 0xe9, 0x4d, 0x6d, 0xb3, 0xba, 0xbf, 0x32,
	0x9e, 0x34, 0x96, 0xf1, 0xef, 0x3f, 0x75, 0x1c, 0x9f, 0x29, 0x8c, 0x5a, 0xa0, 0x4b, 0x61, 0x41,
	0xcd, 0x40, 0x52, 0x75, 0x3c, 0x69, 0x94, 0x91, 0xf4, 0x6c, 0xe0, 0x30, 0x05, 0x59, 0x1f, 0x34,
	0xa8, 0x1c, 0x45, 0x41, 0x9f, 0xf1, 0x37, 0x11, 0x0f, 0x42, 0xfa, 0x08, 0x0c, 0x65, 0x06, 0xca,
	0xab, 0xec, 0x98, 0xad, 0x59, 0x66, 0xad, 0x0c, 0xb1, 0xf5, 0x1c, 0x59, 0x2c, 0x66, 0xd3, 0x2d,
	0x28, 0x2b, 0x62, 0xa7, 0x1d, 0x6b, 0xfe, 0x6f, 0x3c, 0x69, 0xac, 0xe0, 0x73, 0xaf, 0x62, 0x80,
	0xa5, 0x14, 0x7a, 0x0f, 0x74, 0x4f, 0xb8, 0x9d, 0xb6, 0xd2, 0x3c, 0x6f, 0xa2, 0x42, 0xe9, 0x7d,
	0x30, 0x54, 0xb0, 0xa8, 0xbf, 0xb2, 0x43, 0xb3, 0xdb, 0xa8, 0x73, 0x60, 0x31, 0xa3, 0xfe, 0x95,
	0x80, 0xa1, 0x96, 0xa2, 0xeb, 0x50, 0xea, 0xf9, 0xe2, 0x64, 0x51, 0x42, 0x08, 0x4a, 0xeb, 0x83,
	0x81, 0x7b, 0xda, 0x0d, 0x23, 0x3f, 0x3d, 0x93, 0xb4, 0x41, 0xef, 0x80, 0xf6, 0x3a, 0x89, 0x64,
	0x3e, 0x3e, 0x89, 0x5d, 0xce, 0xae, 0x94, 0xcf, 0x6e, 0x17, 0xaa, 0x71, 0x58, 0x87, 0x28, 0x54,
	0xbf, 0x7a, 0x97, 0x4b, 0x24, 0xeb, 0x21, 0x2c, 0x2b, 0x8f, 0x87, 0xde, 0x88, 0x6e, 0xc0, 0xd2,
	0x29, 0x3f, 0x93, 0x81, 0xc6, 0x42, 0x72, 0x29, 0x27, 0xa8, 0xf5, 0xbe, 0x28, 0x33, 0xf4, 0xbc,
	0x3f, 0xcc, 0x30, 0x25, 0xfe, 0x9b, 0x0c, 0xef, 0x82, 0x21, 0x7a, 0xbd, 0x80, 0x87, 0xca, 0xa3,
	0xdc, 0x19, 0xc6, 0x18, 0x5d, 0x03, 0xdd, 0x1b, 0x9c, 0x0c, 0x42, 0xf4, 0x49, 0x67, 0xaa, 0xa8,
	0x6f, 0x5d, 0x2b, 0x52, 0xeb, 0x89, 0xb4, 0x4f, 0xca, 0x93, 0xf6, 0x3d, 0x90, 0x1f, 0x8f, 0xbc,
	0x8c, 0xa0, 0x46, 0x9a, 0xda, 0x82, 0xe3, 0x49, 0x28, 0xd6, 0x27, 0x02, 0x70, 0xc0, 0xc3, 0xc4,
	0xc2, 0xbd, 0x9c, 0x85, 0xb7, 0xb3, 0xb3, 0x33, 0xde, 0xdf, 0x39, 0x78, 0x5d, 0x79, 0xdb, 0x50,
	0xc6, 0xa7, 0xa5, 0xba, 0x75, 0x28, 0x79, 0xc2, 0x4d, 0xa4, 0xad, 0x66, 0xd7, 0x3b, 0x14, 0x2e,
	0x43, 0x70, 0xe7, 0x33, 0x81, 0x25, 0xf5, 0x6c, 0x40, 0x1f, 0x43, 0x49, 0x9e, 0x16, 0xbd, 0xb9,
	0xe0, 0x83, 0xae, 0xff, 0x3f, 0x0f, 0x0c, 0xbd, 0x91, 0x55, 0x50, 0x93, 0x9e, 0x97, 0x9f, 0x4c,
	0xcf, 0x28, 0x3f, 0x19, 0x07, 0x60, 0x15, 0xe8, 0x1e, 0x68, 0x07, 0x3c, 0xa4, 0x37, 0xae, 0x36,
	0xaf, 0xbe, 0x36, 0xd7, 0xc7, 0xb1, 0xfd, 0xe6, 0xaf, 0x9f, 0x26, 0xf9, 0x32, 0x35, 0xc9, 0xb7,
	0xa9, 0x49, 0xce, 0xa7, 0x26, 0xf9, 0x31, 0x35, 0xc9, 0xc7, 0x0b, 0xb3, 0x70, 0x7e, 0x61, 0x16,
	0xbe, 0x5f, 0x98, 0x05, 0xdb, 0xc0, 0x7f, 0x0a, 0xbb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb9,
	0xe1, 0x63, 0x21, 0x60, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThreadsClient is the client API for Threads service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThreadsClient interface {
	// Push a record to a thread.
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	// Pull records from a thread.
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error)
	// Get thread logs.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type threadsClient struct {
	cc *grpc.ClientConn
}

func NewThreadsClient(cc *grpc.ClientConn) ThreadsClient {
	return &threadsClient{cc}
}

func (c *threadsClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := c.cc.Invoke(ctx, "/threads.pb.Threads/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error) {
	out := new(PullReply)
	err := c.cc.Invoke(ctx, "/threads.pb.Threads/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/threads.pb.Threads/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadsServer is the server API for Threads service.
type ThreadsServer interface {
	// Push a record to a thread.
	Push(context.Context, *PushRequest) (*PushReply, error)
	// Pull records from a thread.
	Pull(context.Context, *PullRequest) (*PullReply, error)
	// Get thread logs.
	Get(context.Context, *GetRequest) (*GetReply, error)
}

func RegisterThreadsServer(s *grpc.Server, srv ThreadsServer) {
	s.RegisterService(&_Threads_serviceDesc, srv)
}

func _Threads_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.Threads/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.Threads/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Pull(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.Threads/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Threads_serviceDesc = grpc.ServiceDesc{
	ServiceName: "threads.pb.Threads",
	HandlerType: (*ThreadsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Threads_Push_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Threads_Pull_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Threads_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "threads.proto",
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RecordNode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.RecordNode)))
		i += copy(dAtA[i:], m.RecordNode)
	}
	if len(m.EventNode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.EventNode)))
		i += copy(dAtA[i:], m.EventNode)
	}
	if len(m.HeaderNode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.HeaderNode)))
		i += copy(dAtA[i:], m.HeaderNode)
	}
	if len(m.BodyNode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.BodyNode)))
		i += copy(dAtA[i:], m.BodyNode)
	}
	return i, nil
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.ID.Size()))
		n1, err := m.ID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.PubKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.PubKey.Size()))
		n2, err := m.PubKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.FollowKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.FollowKey)))
		i += copy(dAtA[i:], m.FollowKey)
	}
	if len(m.ReadKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.ReadKey)))
		i += copy(dAtA[i:], m.ReadKey)
	}
	if len(m.Addrs) > 0 {
		for _, msg := range m.Addrs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintThreads(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Heads) > 0 {
		for _, msg := range m.Heads {
			dAtA[i] = 0x32
			i++
			i = encodeVarintThreads(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PushRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Header.Size()))
		n3, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ThreadID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.ThreadID.Size()))
		n4, err := m.ThreadID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.LogID != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.LogID.Size()))
		n5, err := m.LogID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Record != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Record.Size()))
		n6, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *PushRequest_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushRequest_Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.From.Size()))
		n7, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Key != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Key.Size()))
		n8, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.FollowKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThreads(dAtA, i, uint64(len(m.FollowKey)))
		i += copy(dAtA[i:], m.FollowKey)
	}
	if m.ReadKeyLogID != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.ReadKeyLogID.Size()))
		n9, err := m.ReadKeyLogID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *PushReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewAddr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.NewAddr.Size()))
		n10, err := m.NewAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *PullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Header.Size()))
		n11, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.ThreadID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.ThreadID.Size()))
		n12, err := m.ThreadID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.LogID != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.LogID.Size()))
		n13, err := m.LogID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Offset != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Offset.Size()))
		n14, err := m.Offset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *PullRequest_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequest_Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.From.Size()))
		n15, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *PullReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintThreads(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.Header.Size()))
		n16, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.ThreadID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.ThreadID.Size()))
		n17, err := m.ThreadID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *GetRequest_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest_Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThreads(dAtA, i, uint64(m.From.Size()))
		n18, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *GetReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintThreads(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintThreads(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRecord(r randyThreads, easy bool) *Record {
	this := &Record{}
	v1 := r.Intn(100)
	this.RecordNode = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.RecordNode[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.EventNode = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.EventNode[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(100)
	this.HeaderNode = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.HeaderNode[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.BodyNode = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.BodyNode[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLog(r randyThreads, easy bool) *Log {
	this := &Log{}
	this.ID = NewPopulatedProtoPeerID(r)
	this.PubKey = NewPopulatedProtoPubKey(r)
	v5 := r.Intn(100)
	this.FollowKey = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.FollowKey[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(100)
	this.ReadKey = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.ReadKey[i] = byte(r.Intn(256))
	}
	v7 := r.Intn(10)
	this.Addrs = make([]ProtoAddr, v7)
	for i := 0; i < v7; i++ {
		v8 := NewPopulatedProtoAddr(r)
		this.Addrs[i] = *v8
	}
	v9 := r.Intn(10)
	this.Heads = make([]ProtoCid, v9)
	for i := 0; i < v9; i++ {
		v10 := NewPopulatedProtoCid(r)
		this.Heads[i] = *v10
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPushRequest(r randyThreads, easy bool) *PushRequest {
	this := &PushRequest{}
	if r.Intn(10) != 0 {
		this.Header = NewPopulatedPushRequest_Header(r, easy)
	}
	this.ThreadID = NewPopulatedProtoThreadID(r)
	this.LogID = NewPopulatedProtoPeerID(r)
	if r.Intn(10) != 0 {
		this.Record = NewPopulatedRecord(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPushRequest_Header(r randyThreads, easy bool) *PushRequest_Header {
	this := &PushRequest_Header{}
	this.From = NewPopulatedProtoPeerID(r)
	v11 := r.Intn(100)
	this.Signature = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	this.Key = NewPopulatedProtoPubKey(r)
	v12 := r.Intn(100)
	this.FollowKey = make([]byte, v12)
	for i := 0; i < v12; i++ {
		this.FollowKey[i] = byte(r.Intn(256))
	}
	this.ReadKeyLogID = NewPopulatedProtoPeerID(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPushReply(r randyThreads, easy bool) *PushReply {
	this := &PushReply{}
	this.NewAddr = NewPopulatedProtoAddr(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPullRequest(r randyThreads, easy bool) *PullRequest {
	this := &PullRequest{}
	if r.Intn(10) != 0 {
		this.Header = NewPopulatedPullRequest_Header(r, easy)
	}
	this.ThreadID = NewPopulatedProtoThreadID(r)
	this.LogID = NewPopulatedProtoPeerID(r)
	this.Offset = NewPopulatedProtoCid(r)
	this.Limit = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPullRequest_Header(r randyThreads, easy bool) *PullRequest_Header {
	this := &PullRequest_Header{}
	this.From = NewPopulatedProtoPeerID(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPullReply(r randyThreads, easy bool) *PullReply {
	this := &PullReply{}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.Records = make([]*Record, v13)
		for i := 0; i < v13; i++ {
			this.Records[i] = NewPopulatedRecord(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRequest(r randyThreads, easy bool) *GetRequest {
	this := &GetRequest{}
	if r.Intn(10) != 0 {
		this.Header = NewPopulatedGetRequest_Header(r, easy)
	}
	this.ThreadID = NewPopulatedProtoThreadID(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRequest_Header(r randyThreads, easy bool) *GetRequest_Header {
	this := &GetRequest_Header{}
	this.From = NewPopulatedProtoPeerID(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetReply(r randyThreads, easy bool) *GetReply {
	this := &GetReply{}
	if r.Intn(10) != 0 {
		v14 := r.Intn(5)
		this.Logs = make([]*Log, v14)
		for i := 0; i < v14; i++ {
			this.Logs[i] = NewPopulatedLog(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyThreads interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneThreads(r randyThreads) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringThreads(r randyThreads) string {
	v15 := r.Intn(100)
	tmps := make([]rune, v15)
	for i := 0; i < v15; i++ {
		tmps[i] = randUTF8RuneThreads(r)
	}
	return string(tmps)
}
func randUnrecognizedThreads(r randyThreads, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldThreads(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldThreads(dAtA []byte, r randyThreads, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(key))
		v16 := r.Int63()
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(v16))
	case 1:
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateThreads(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateThreads(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordNode)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.EventNode)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.HeaderNode)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.BodyNode)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *Log) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.FollowKey)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.ReadKey)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, e := range m.Addrs {
			l = e.Size()
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	if len(m.Heads) > 0 {
		for _, e := range m.Heads {
			l = e.Size()
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	return n
}

func (m *PushRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.ThreadID != nil {
		l = m.ThreadID.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.LogID != nil {
		l = m.LogID.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *PushRequest_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.FollowKey)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.ReadKeyLogID != nil {
		l = m.ReadKeyLogID.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *PushReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewAddr != nil {
		l = m.NewAddr.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *PullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.ThreadID != nil {
		l = m.ThreadID.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.LogID != nil {
		l = m.LogID.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.Offset != nil {
		l = m.Offset.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovThreads(uint64(m.Limit))
	}
	return n
}

func (m *PullRequest_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *PullReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.ThreadID != nil {
		l = m.ThreadID.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *GetRequest_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *GetReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	return n
}

func sovThreads(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozThreads(x uint64) (n int) {
	return sovThreads(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordNode = append(m.RecordNode[:0], dAtA[iNdEx:postIndex]...)
			if m.RecordNode == nil {
				m.RecordNode = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventNode = append(m.EventNode[:0], dAtA[iNdEx:postIndex]...)
			if m.EventNode == nil {
				m.EventNode = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderNode = append(m.HeaderNode[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderNode == nil {
				m.HeaderNode = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyNode = append(m.BodyNode[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyNode == nil {
				m.BodyNode = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoPeerID
			m.ID = &v
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoPubKey
			m.PubKey = &v
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowKey = append(m.FollowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.FollowKey == nil {
				m.FollowKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadKey = append(m.ReadKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ReadKey == nil {
				m.ReadKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoAddr
			m.Addrs = append(m.Addrs, v)
			if err := m.Addrs[len(m.Addrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heads", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoCid
			m.Heads = append(m.Heads, v)
			if err := m.Heads[len(m.Heads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &PushRequest_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoThreadID
			m.ThreadID = &v
			if err := m.ThreadID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoPeerID
			m.LogID = &v
			if err := m.LogID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushRequest_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoPeerID
			m.From = &v
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoPubKey
			m.Key = &v
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowKey = append(m.FollowKey[:0], dAtA[iNdEx:postIndex]...)
			if m.FollowKey == nil {
				m.FollowKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadKeyLogID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoPeerID
			m.ReadKeyLogID = &v
			if err := m.ReadKeyLogID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoAddr
			m.NewAddr = &v
			if err := m.NewAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &PullRequest_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoThreadID
			m.ThreadID = &v
			if err := m.ThreadID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoPeerID
			m.LogID = &v
			if err := m.LogID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoCid
			m.Offset = &v
			if err := m.Offset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequest_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoPeerID
			m.From = &v
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &GetRequest_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoThreadID
			m.ThreadID = &v
			if err := m.ThreadID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v ProtoPeerID
			m.From = &v
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThreads(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthThreads
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthThreads
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowThreads
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipThreads(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthThreads
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthThreads = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThreads   = fmt.Errorf("proto: integer overflow")
)
