syntax = "proto3";
package threads.pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/textileio/go-textile-core/crypto/pb/crypto.proto";

option (gogoproto.benchgen_all) = true;
option (gogoproto.populate_all) = true;

message Record {
    bytes node = 1;

    bytes eventNode = 2;

    bytes headerNode = 3;

    bytes bodyNode = 4;
}

message PushRequest {
    Header header = 1;

    bytes threadID = 2 [(gogoproto.customtype) = "ProtoThreadID"];

    bytes logID = 3 [(gogoproto.customtype) = "ProtoPeerID"];

    Record record = 4;

    message Header {
        bytes from = 1 [(gogoproto.customtype) = "ProtoPeerID"];

        bytes signature = 2;

        textile.crypto.pb.PublicKey key = 3;

        bytes followKey = 4;

        bytes readKeyLogID = 5 [(gogoproto.customtype) = "ProtoPeerID"];
    }
}

message PushReply {
    bool ok = 1;
}

message PullRequest {
    Header header = 1;

    bytes threadID = 2 [(gogoproto.customtype) = "ProtoThreadID"];

    bytes logID = 3 [(gogoproto.customtype) = "ProtoPeerID"];

    bytes offset = 4 [(gogoproto.customtype) = "ProtoCid"];

    int32 limit = 5;

    message Header {
        bytes from = 1 [(gogoproto.customtype) = "ProtoPeerID"];
    }
}

message PullReply {
    repeated Record records = 1;
}

service Threads {
    rpc Push(PushRequest) returns (PushReply) {}
    rpc Pull(PullRequest) returns (PullReply) {}
}
