syntax = "proto3";
package threads.pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/textileio/go-textile-core/crypto/pb/crypto.proto";

option (gogoproto.benchgen_all) = true;
option (gogoproto.populate_all) = true;

message Record {
    bytes node = 1;

    bytes event_node = 2;

    bytes header_node = 3;

    bytes body_node = 4;
}

message RecordRequest {
    Header header = 1;

    bytes thread_id = 2 [(gogoproto.customtype) = "ProtoThreadID"];

    bytes log_id = 3 [(gogoproto.customtype) = "ProtoPeerID"];

    Record record = 4;

    message Header {
        bytes from = 1 [(gogoproto.customtype) = "ProtoPeerID"];

        bytes signature = 2;

        textile.crypto.pb.PublicKey key = 3;

        bytes follow_key = 4;
    }
}

message RecordReply {
    bool ok = 1;
}

service Threads {
    rpc Push(RecordRequest) returns (RecordReply) {}
    //rpc Pull(FetchRequest) returns (FetchReply) {}
}
