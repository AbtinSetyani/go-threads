/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
goog.exportSymbol('proto.threads.pb.GetLogsReply', null, global);
goog.exportSymbol('proto.threads.pb.GetLogsRequest', null, global);
goog.exportSymbol('proto.threads.pb.GetLogsRequest.Header', null, global);
goog.exportSymbol('proto.threads.pb.GetRecordsReply', null, global);
goog.exportSymbol('proto.threads.pb.GetRecordsReply.LogEntry', null, global);
goog.exportSymbol('proto.threads.pb.GetRecordsRequest', null, global);
goog.exportSymbol('proto.threads.pb.GetRecordsRequest.Header', null, global);
goog.exportSymbol('proto.threads.pb.GetRecordsRequest.LogEntry', null, global);
goog.exportSymbol('proto.threads.pb.Log', null, global);
goog.exportSymbol('proto.threads.pb.Log.Record', null, global);
goog.exportSymbol('proto.threads.pb.PushLogReply', null, global);
goog.exportSymbol('proto.threads.pb.PushLogRequest', null, global);
goog.exportSymbol('proto.threads.pb.PushLogRequest.Header', null, global);
goog.exportSymbol('proto.threads.pb.PushRecordReply', null, global);
goog.exportSymbol('proto.threads.pb.PushRecordRequest', null, global);
goog.exportSymbol('proto.threads.pb.PushRecordRequest.Header', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.Log.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.Log.displayName = 'proto.threads.pb.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.Log.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.Log.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.Log.Record.displayName = 'proto.threads.pb.Log.Record';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.GetLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetLogsRequest.displayName = 'proto.threads.pb.GetLogsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetLogsRequest.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.GetLogsRequest.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetLogsRequest.Header.displayName = 'proto.threads.pb.GetLogsRequest.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetLogsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.GetLogsReply.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.GetLogsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetLogsReply.displayName = 'proto.threads.pb.GetLogsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.PushLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.PushLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.PushLogRequest.displayName = 'proto.threads.pb.PushLogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.PushLogRequest.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.PushLogRequest.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.PushLogRequest.Header.displayName = 'proto.threads.pb.PushLogRequest.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.PushLogReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.PushLogReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.PushLogReply.displayName = 'proto.threads.pb.PushLogReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetRecordsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.GetRecordsRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.GetRecordsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetRecordsRequest.displayName = 'proto.threads.pb.GetRecordsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetRecordsRequest.LogEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.GetRecordsRequest.LogEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetRecordsRequest.LogEntry.displayName = 'proto.threads.pb.GetRecordsRequest.LogEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetRecordsRequest.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.GetRecordsRequest.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetRecordsRequest.Header.displayName = 'proto.threads.pb.GetRecordsRequest.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetRecordsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.GetRecordsReply.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.GetRecordsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetRecordsReply.displayName = 'proto.threads.pb.GetRecordsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetRecordsReply.LogEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.GetRecordsReply.LogEntry.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.GetRecordsReply.LogEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetRecordsReply.LogEntry.displayName = 'proto.threads.pb.GetRecordsReply.LogEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.PushRecordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.PushRecordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.PushRecordRequest.displayName = 'proto.threads.pb.PushRecordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.PushRecordRequest.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.PushRecordRequest.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.PushRecordRequest.Header.displayName = 'proto.threads.pb.PushRecordRequest.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.PushRecordReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.PushRecordReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.PushRecordReply.displayName = 'proto.threads.pb.PushRecordReply';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.Log.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.Log.toObject = function(includeInstance, msg) {
  var obj = {
    id: msg.getId_asB64(),
    pubkey: msg.getPubkey_asB64(),
    followkey: msg.getFollowkey_asB64(),
    readkey: msg.getReadkey_asB64(),
    addrsList: msg.getAddrsList_asB64(),
    headsList: msg.getHeadsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.Log}
 */
proto.threads.pb.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.Log;
  return proto.threads.pb.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.Log}
 */
proto.threads.pb.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFollowkey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReadkey(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAddrs(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addHeads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getFollowkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getReadkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAddrsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = message.getHeadsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      6,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.Log.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.Log.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.Log.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.Log.Record.toObject = function(includeInstance, msg) {
  var obj = {
    recordnode: msg.getRecordnode_asB64(),
    eventnode: msg.getEventnode_asB64(),
    headernode: msg.getHeadernode_asB64(),
    bodynode: msg.getBodynode_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.Log.Record}
 */
proto.threads.pb.Log.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.Log.Record;
  return proto.threads.pb.Log.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.Log.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.Log.Record}
 */
proto.threads.pb.Log.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecordnode(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEventnode(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadernode(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodynode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.Log.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.Log.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.Log.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordnode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEventnode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getHeadernode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBodynode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes recordNode = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.Log.Record.prototype.getRecordnode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes recordNode = 1;
 * This is a type-conversion wrapper around `getRecordnode()`
 * @return {string}
 */
proto.threads.pb.Log.Record.prototype.getRecordnode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecordnode()));
};


/**
 * optional bytes recordNode = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecordnode()`
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.Record.prototype.getRecordnode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecordnode()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.Log.Record.prototype.setRecordnode = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes eventNode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.Log.Record.prototype.getEventnode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes eventNode = 2;
 * This is a type-conversion wrapper around `getEventnode()`
 * @return {string}
 */
proto.threads.pb.Log.Record.prototype.getEventnode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEventnode()));
};


/**
 * optional bytes eventNode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEventnode()`
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.Record.prototype.getEventnode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEventnode()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.Log.Record.prototype.setEventnode = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes headerNode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.Log.Record.prototype.getHeadernode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes headerNode = 3;
 * This is a type-conversion wrapper around `getHeadernode()`
 * @return {string}
 */
proto.threads.pb.Log.Record.prototype.getHeadernode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadernode()));
};


/**
 * optional bytes headerNode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadernode()`
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.Record.prototype.getHeadernode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadernode()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.Log.Record.prototype.setHeadernode = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes bodyNode = 4;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.Log.Record.prototype.getBodynode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes bodyNode = 4;
 * This is a type-conversion wrapper around `getBodynode()`
 * @return {string}
 */
proto.threads.pb.Log.Record.prototype.getBodynode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodynode()));
};


/**
 * optional bytes bodyNode = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodynode()`
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.Record.prototype.getBodynode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodynode()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.Log.Record.prototype.setBodynode = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.Log.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.threads.pb.Log.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.Log.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes pubKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.Log.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pubKey = 2;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.threads.pb.Log.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.Log.prototype.setPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes followKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.Log.prototype.getFollowkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes followKey = 3;
 * This is a type-conversion wrapper around `getFollowkey()`
 * @return {string}
 */
proto.threads.pb.Log.prototype.getFollowkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFollowkey()));
};


/**
 * optional bytes followKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFollowkey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.prototype.getFollowkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFollowkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.Log.prototype.setFollowkey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes readKey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.Log.prototype.getReadkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes readKey = 4;
 * This is a type-conversion wrapper around `getReadkey()`
 * @return {string}
 */
proto.threads.pb.Log.prototype.getReadkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReadkey()));
};


/**
 * optional bytes readKey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReadkey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.Log.prototype.getReadkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReadkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.Log.prototype.setReadkey = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated bytes addrs = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.pb.Log.prototype.getAddrsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes addrs = 5;
 * This is a type-conversion wrapper around `getAddrsList()`
 * @return {!Array<string>}
 */
proto.threads.pb.Log.prototype.getAddrsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAddrsList()));
};


/**
 * repeated bytes addrs = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddrsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.pb.Log.prototype.getAddrsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAddrsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.threads.pb.Log.prototype.setAddrsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.threads.pb.Log.prototype.addAddrs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.threads.pb.Log.prototype.clearAddrsList = function() {
  this.setAddrsList([]);
};


/**
 * repeated bytes heads = 6;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.pb.Log.prototype.getHeadsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * repeated bytes heads = 6;
 * This is a type-conversion wrapper around `getHeadsList()`
 * @return {!Array<string>}
 */
proto.threads.pb.Log.prototype.getHeadsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getHeadsList()));
};


/**
 * repeated bytes heads = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.pb.Log.prototype.getHeadsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getHeadsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.threads.pb.Log.prototype.setHeadsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.threads.pb.Log.prototype.addHeads = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.threads.pb.Log.prototype.clearHeadsList = function() {
  this.setHeadsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetLogsRequest.toObject = function(includeInstance, msg) {
  var obj = {
    header: (f = msg.getHeader()) && proto.threads.pb.GetLogsRequest.Header.toObject(includeInstance, f),
    threadid: msg.getThreadid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetLogsRequest}
 */
proto.threads.pb.GetLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetLogsRequest;
  return proto.threads.pb.GetLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetLogsRequest}
 */
proto.threads.pb.GetLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.GetLogsRequest.Header;
      reader.readMessage(value,proto.threads.pb.GetLogsRequest.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.threads.pb.GetLogsRequest.Header.serializeBinaryToWriter
    );
  }
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetLogsRequest.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetLogsRequest.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetLogsRequest.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetLogsRequest.Header.toObject = function(includeInstance, msg) {
  var obj = {
    from: msg.getFrom_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetLogsRequest.Header}
 */
proto.threads.pb.GetLogsRequest.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetLogsRequest.Header;
  return proto.threads.pb.GetLogsRequest.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetLogsRequest.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetLogsRequest.Header}
 */
proto.threads.pb.GetLogsRequest.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetLogsRequest.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetLogsRequest.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetLogsRequest.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetLogsRequest.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes from = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetLogsRequest.Header.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes from = 1;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.threads.pb.GetLogsRequest.Header.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetLogsRequest.Header.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.GetLogsRequest.Header.prototype.setFrom = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Header header = 1;
 * @return {?proto.threads.pb.GetLogsRequest.Header}
 */
proto.threads.pb.GetLogsRequest.prototype.getHeader = function() {
  return /** @type{?proto.threads.pb.GetLogsRequest.Header} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.GetLogsRequest.Header, 1));
};


/** @param {?proto.threads.pb.GetLogsRequest.Header|undefined} value */
proto.threads.pb.GetLogsRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.threads.pb.GetLogsRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.GetLogsRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes threadID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetLogsRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes threadID = 2;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.pb.GetLogsRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetLogsRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.GetLogsRequest.prototype.setThreadid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.GetLogsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetLogsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetLogsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetLogsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetLogsReply.toObject = function(includeInstance, msg) {
  var obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.threads.pb.Log.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetLogsReply}
 */
proto.threads.pb.GetLogsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetLogsReply;
  return proto.threads.pb.GetLogsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetLogsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetLogsReply}
 */
proto.threads.pb.GetLogsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.Log;
      reader.readMessage(value,proto.threads.pb.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetLogsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetLogsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetLogsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetLogsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.threads.pb.Log.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Log logs = 1;
 * @return {!Array<!proto.threads.pb.Log>}
 */
proto.threads.pb.GetLogsReply.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.threads.pb.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.Log, 1));
};


/** @param {!Array<!proto.threads.pb.Log>} value */
proto.threads.pb.GetLogsReply.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.threads.pb.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.Log}
 */
proto.threads.pb.GetLogsReply.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.threads.pb.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.threads.pb.GetLogsReply.prototype.clearLogsList = function() {
  this.setLogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.PushLogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.PushLogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.PushLogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushLogRequest.toObject = function(includeInstance, msg) {
  var obj = {
    header: (f = msg.getHeader()) && proto.threads.pb.PushLogRequest.Header.toObject(includeInstance, f),
    threadid: msg.getThreadid_asB64(),
    log: (f = msg.getLog()) && proto.threads.pb.Log.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.PushLogRequest}
 */
proto.threads.pb.PushLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.PushLogRequest;
  return proto.threads.pb.PushLogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.PushLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.PushLogRequest}
 */
proto.threads.pb.PushLogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.PushLogRequest.Header;
      reader.readMessage(value,proto.threads.pb.PushLogRequest.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 3:
      var value = new proto.threads.pb.Log;
      reader.readMessage(value,proto.threads.pb.Log.deserializeBinaryFromReader);
      msg.setLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.PushLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.PushLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.PushLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushLogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.threads.pb.PushLogRequest.Header.serializeBinaryToWriter
    );
  }
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLog();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.threads.pb.Log.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.PushLogRequest.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.PushLogRequest.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.PushLogRequest.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushLogRequest.Header.toObject = function(includeInstance, msg) {
  var obj = {
    from: msg.getFrom_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.PushLogRequest.Header}
 */
proto.threads.pb.PushLogRequest.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.PushLogRequest.Header;
  return proto.threads.pb.PushLogRequest.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.PushLogRequest.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.PushLogRequest.Header}
 */
proto.threads.pb.PushLogRequest.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.PushLogRequest.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.PushLogRequest.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.PushLogRequest.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushLogRequest.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes from = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.PushLogRequest.Header.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes from = 1;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.threads.pb.PushLogRequest.Header.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.threads.pb.PushLogRequest.Header.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.PushLogRequest.Header.prototype.setFrom = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Header header = 1;
 * @return {?proto.threads.pb.PushLogRequest.Header}
 */
proto.threads.pb.PushLogRequest.prototype.getHeader = function() {
  return /** @type{?proto.threads.pb.PushLogRequest.Header} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.PushLogRequest.Header, 1));
};


/** @param {?proto.threads.pb.PushLogRequest.Header|undefined} value */
proto.threads.pb.PushLogRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.threads.pb.PushLogRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.PushLogRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes threadID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.PushLogRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes threadID = 2;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.pb.PushLogRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.PushLogRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.PushLogRequest.prototype.setThreadid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Log log = 3;
 * @return {?proto.threads.pb.Log}
 */
proto.threads.pb.PushLogRequest.prototype.getLog = function() {
  return /** @type{?proto.threads.pb.Log} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.Log, 3));
};


/** @param {?proto.threads.pb.Log|undefined} value */
proto.threads.pb.PushLogRequest.prototype.setLog = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.threads.pb.PushLogRequest.prototype.clearLog = function() {
  this.setLog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.PushLogRequest.prototype.hasLog = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.PushLogReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.PushLogReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.PushLogReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushLogReply.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.PushLogReply}
 */
proto.threads.pb.PushLogReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.PushLogReply;
  return proto.threads.pb.PushLogReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.PushLogReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.PushLogReply}
 */
proto.threads.pb.PushLogReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.PushLogReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.PushLogReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.PushLogReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushLogReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.GetRecordsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetRecordsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetRecordsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetRecordsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsRequest.toObject = function(includeInstance, msg) {
  var obj = {
    header: (f = msg.getHeader()) && proto.threads.pb.GetRecordsRequest.Header.toObject(includeInstance, f),
    threadid: msg.getThreadid_asB64(),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.threads.pb.GetRecordsRequest.LogEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetRecordsRequest}
 */
proto.threads.pb.GetRecordsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetRecordsRequest;
  return proto.threads.pb.GetRecordsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetRecordsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetRecordsRequest}
 */
proto.threads.pb.GetRecordsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.GetRecordsRequest.Header;
      reader.readMessage(value,proto.threads.pb.GetRecordsRequest.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 3:
      var value = new proto.threads.pb.GetRecordsRequest.LogEntry;
      reader.readMessage(value,proto.threads.pb.GetRecordsRequest.LogEntry.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetRecordsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetRecordsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.threads.pb.GetRecordsRequest.Header.serializeBinaryToWriter
    );
  }
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.threads.pb.GetRecordsRequest.LogEntry.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetRecordsRequest.LogEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetRecordsRequest.LogEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsRequest.LogEntry.toObject = function(includeInstance, msg) {
  var obj = {
    logid: msg.getLogid_asB64(),
    offset: msg.getOffset_asB64(),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetRecordsRequest.LogEntry}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetRecordsRequest.LogEntry;
  return proto.threads.pb.GetRecordsRequest.LogEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetRecordsRequest.LogEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetRecordsRequest.LogEntry}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetRecordsRequest.LogEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetRecordsRequest.LogEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsRequest.LogEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes logID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.getLogid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes logID = 1;
 * This is a type-conversion wrapper around `getLogid()`
 * @return {string}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.getLogid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogid()));
};


/**
 * optional bytes logID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.getLogid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.setLogid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes offset = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.getOffset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes offset = 2;
 * This is a type-conversion wrapper around `getOffset()`
 * @return {string}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.getOffset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOffset()));
};


/**
 * optional bytes offset = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffset()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.getOffset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOffset()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.setOffset = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.threads.pb.GetRecordsRequest.LogEntry.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetRecordsRequest.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetRecordsRequest.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetRecordsRequest.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsRequest.Header.toObject = function(includeInstance, msg) {
  var obj = {
    from: msg.getFrom_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetRecordsRequest.Header}
 */
proto.threads.pb.GetRecordsRequest.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetRecordsRequest.Header;
  return proto.threads.pb.GetRecordsRequest.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetRecordsRequest.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetRecordsRequest.Header}
 */
proto.threads.pb.GetRecordsRequest.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsRequest.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetRecordsRequest.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetRecordsRequest.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsRequest.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes from = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetRecordsRequest.Header.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes from = 1;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.threads.pb.GetRecordsRequest.Header.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsRequest.Header.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.GetRecordsRequest.Header.prototype.setFrom = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Header header = 1;
 * @return {?proto.threads.pb.GetRecordsRequest.Header}
 */
proto.threads.pb.GetRecordsRequest.prototype.getHeader = function() {
  return /** @type{?proto.threads.pb.GetRecordsRequest.Header} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.GetRecordsRequest.Header, 1));
};


/** @param {?proto.threads.pb.GetRecordsRequest.Header|undefined} value */
proto.threads.pb.GetRecordsRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.threads.pb.GetRecordsRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.GetRecordsRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes threadID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetRecordsRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes threadID = 2;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.pb.GetRecordsRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.GetRecordsRequest.prototype.setThreadid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated LogEntry logs = 3;
 * @return {!Array<!proto.threads.pb.GetRecordsRequest.LogEntry>}
 */
proto.threads.pb.GetRecordsRequest.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.threads.pb.GetRecordsRequest.LogEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.GetRecordsRequest.LogEntry, 3));
};


/** @param {!Array<!proto.threads.pb.GetRecordsRequest.LogEntry>} value */
proto.threads.pb.GetRecordsRequest.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.threads.pb.GetRecordsRequest.LogEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.GetRecordsRequest.LogEntry}
 */
proto.threads.pb.GetRecordsRequest.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.threads.pb.GetRecordsRequest.LogEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.threads.pb.GetRecordsRequest.prototype.clearLogsList = function() {
  this.setLogsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.GetRecordsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetRecordsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetRecordsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetRecordsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsReply.toObject = function(includeInstance, msg) {
  var obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.threads.pb.GetRecordsReply.LogEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetRecordsReply}
 */
proto.threads.pb.GetRecordsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetRecordsReply;
  return proto.threads.pb.GetRecordsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetRecordsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetRecordsReply}
 */
proto.threads.pb.GetRecordsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.GetRecordsReply.LogEntry;
      reader.readMessage(value,proto.threads.pb.GetRecordsReply.LogEntry.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetRecordsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetRecordsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.threads.pb.GetRecordsReply.LogEntry.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.GetRecordsReply.LogEntry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetRecordsReply.LogEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetRecordsReply.LogEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsReply.LogEntry.toObject = function(includeInstance, msg) {
  var obj = {
    logid: msg.getLogid_asB64(),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.threads.pb.Log.Record.toObject, includeInstance),
    log: (f = msg.getLog()) && proto.threads.pb.Log.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetRecordsReply.LogEntry}
 */
proto.threads.pb.GetRecordsReply.LogEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetRecordsReply.LogEntry;
  return proto.threads.pb.GetRecordsReply.LogEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetRecordsReply.LogEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetRecordsReply.LogEntry}
 */
proto.threads.pb.GetRecordsReply.LogEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogid(value);
      break;
    case 2:
      var value = new proto.threads.pb.Log.Record;
      reader.readMessage(value,proto.threads.pb.Log.Record.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    case 3:
      var value = new proto.threads.pb.Log;
      reader.readMessage(value,proto.threads.pb.Log.deserializeBinaryFromReader);
      msg.setLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetRecordsReply.LogEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetRecordsReply.LogEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetRecordsReply.LogEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.threads.pb.Log.Record.serializeBinaryToWriter
    );
  }
  f = message.getLog();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.threads.pb.Log.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes logID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.getLogid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes logID = 1;
 * This is a type-conversion wrapper around `getLogid()`
 * @return {string}
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.getLogid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogid()));
};


/**
 * optional bytes logID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.getLogid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.setLogid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Log.Record records = 2;
 * @return {!Array<!proto.threads.pb.Log.Record>}
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.threads.pb.Log.Record>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.Log.Record, 2));
};


/** @param {!Array<!proto.threads.pb.Log.Record>} value */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.setRecordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.threads.pb.Log.Record=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.Log.Record}
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.threads.pb.Log.Record, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.clearRecordsList = function() {
  this.setRecordsList([]);
};


/**
 * optional Log log = 3;
 * @return {?proto.threads.pb.Log}
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.getLog = function() {
  return /** @type{?proto.threads.pb.Log} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.Log, 3));
};


/** @param {?proto.threads.pb.Log|undefined} value */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.setLog = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.clearLog = function() {
  this.setLog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.GetRecordsReply.LogEntry.prototype.hasLog = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated LogEntry logs = 1;
 * @return {!Array<!proto.threads.pb.GetRecordsReply.LogEntry>}
 */
proto.threads.pb.GetRecordsReply.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.threads.pb.GetRecordsReply.LogEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.GetRecordsReply.LogEntry, 1));
};


/** @param {!Array<!proto.threads.pb.GetRecordsReply.LogEntry>} value */
proto.threads.pb.GetRecordsReply.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.threads.pb.GetRecordsReply.LogEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.GetRecordsReply.LogEntry}
 */
proto.threads.pb.GetRecordsReply.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.threads.pb.GetRecordsReply.LogEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.threads.pb.GetRecordsReply.prototype.clearLogsList = function() {
  this.setLogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.PushRecordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.PushRecordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.PushRecordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushRecordRequest.toObject = function(includeInstance, msg) {
  var obj = {
    header: (f = msg.getHeader()) && proto.threads.pb.PushRecordRequest.Header.toObject(includeInstance, f),
    threadid: msg.getThreadid_asB64(),
    logid: msg.getLogid_asB64(),
    record: (f = msg.getRecord()) && proto.threads.pb.Log.Record.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.PushRecordRequest}
 */
proto.threads.pb.PushRecordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.PushRecordRequest;
  return proto.threads.pb.PushRecordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.PushRecordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.PushRecordRequest}
 */
proto.threads.pb.PushRecordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.PushRecordRequest.Header;
      reader.readMessage(value,proto.threads.pb.PushRecordRequest.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogid(value);
      break;
    case 4:
      var value = new proto.threads.pb.Log.Record;
      reader.readMessage(value,proto.threads.pb.Log.Record.deserializeBinaryFromReader);
      msg.setRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.PushRecordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.PushRecordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.PushRecordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushRecordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.threads.pb.PushRecordRequest.Header.serializeBinaryToWriter
    );
  }
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLogid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRecord();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.threads.pb.Log.Record.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.PushRecordRequest.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.PushRecordRequest.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushRecordRequest.Header.toObject = function(includeInstance, msg) {
  var obj = {
    from: msg.getFrom_asB64(),
    signature: msg.getSignature_asB64(),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.PushRecordRequest.Header}
 */
proto.threads.pb.PushRecordRequest.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.PushRecordRequest.Header;
  return proto.threads.pb.PushRecordRequest.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.PushRecordRequest.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.PushRecordRequest.Header}
 */
proto.threads.pb.PushRecordRequest.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.PushRecordRequest.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.PushRecordRequest.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushRecordRequest.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes from = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes from = 1;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.PushRecordRequest.Header.prototype.setFrom = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.PushRecordRequest.Header.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key = 3;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.PushRecordRequest.Header.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.PushRecordRequest.Header.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Header header = 1;
 * @return {?proto.threads.pb.PushRecordRequest.Header}
 */
proto.threads.pb.PushRecordRequest.prototype.getHeader = function() {
  return /** @type{?proto.threads.pb.PushRecordRequest.Header} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.PushRecordRequest.Header, 1));
};


/** @param {?proto.threads.pb.PushRecordRequest.Header|undefined} value */
proto.threads.pb.PushRecordRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.threads.pb.PushRecordRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.PushRecordRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes threadID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.PushRecordRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes threadID = 2;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.pb.PushRecordRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.PushRecordRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.PushRecordRequest.prototype.setThreadid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes logID = 3;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.PushRecordRequest.prototype.getLogid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes logID = 3;
 * This is a type-conversion wrapper around `getLogid()`
 * @return {string}
 */
proto.threads.pb.PushRecordRequest.prototype.getLogid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogid()));
};


/**
 * optional bytes logID = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.PushRecordRequest.prototype.getLogid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.PushRecordRequest.prototype.setLogid = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Log.Record record = 4;
 * @return {?proto.threads.pb.Log.Record}
 */
proto.threads.pb.PushRecordRequest.prototype.getRecord = function() {
  return /** @type{?proto.threads.pb.Log.Record} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.Log.Record, 4));
};


/** @param {?proto.threads.pb.Log.Record|undefined} value */
proto.threads.pb.PushRecordRequest.prototype.setRecord = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.threads.pb.PushRecordRequest.prototype.clearRecord = function() {
  this.setRecord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.PushRecordRequest.prototype.hasRecord = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.PushRecordReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.PushRecordReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.PushRecordReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushRecordReply.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.PushRecordReply}
 */
proto.threads.pb.PushRecordReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.PushRecordReply;
  return proto.threads.pb.PushRecordReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.PushRecordReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.PushRecordReply}
 */
proto.threads.pb.PushRecordReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.PushRecordReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.PushRecordReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.PushRecordReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.PushRecordReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.threads.pb);
