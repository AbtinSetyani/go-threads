/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
goog.exportSymbol('proto.threads.pb.AddrBookRecord', null, global);
goog.exportSymbol('proto.threads.pb.AddrBookRecord.AddrEntry', null, global);
goog.exportSymbol('proto.threads.pb.HeadBookRecord', null, global);
goog.exportSymbol('proto.threads.pb.HeadBookRecord.HeadEntry', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.AddrBookRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.AddrBookRecord.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.AddrBookRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.AddrBookRecord.displayName = 'proto.threads.pb.AddrBookRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.AddrBookRecord.AddrEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.AddrBookRecord.AddrEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.AddrBookRecord.AddrEntry.displayName = 'proto.threads.pb.AddrBookRecord.AddrEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.HeadBookRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.HeadBookRecord.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.HeadBookRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.HeadBookRecord.displayName = 'proto.threads.pb.HeadBookRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.HeadBookRecord.HeadEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.HeadBookRecord.HeadEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.HeadBookRecord.HeadEntry.displayName = 'proto.threads.pb.HeadBookRecord.HeadEntry';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.AddrBookRecord.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.AddrBookRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.AddrBookRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.AddrBookRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.AddrBookRecord.toObject = function(includeInstance, msg) {
  var obj = {
    threadid: msg.getThreadid_asB64(),
    peerid: msg.getPeerid_asB64(),
    addrsList: jspb.Message.toObjectList(msg.getAddrsList(),
    proto.threads.pb.AddrBookRecord.AddrEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.AddrBookRecord}
 */
proto.threads.pb.AddrBookRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.AddrBookRecord;
  return proto.threads.pb.AddrBookRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.AddrBookRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.AddrBookRecord}
 */
proto.threads.pb.AddrBookRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerid(value);
      break;
    case 3:
      var value = new proto.threads.pb.AddrBookRecord.AddrEntry;
      reader.readMessage(value,proto.threads.pb.AddrBookRecord.AddrEntry.deserializeBinaryFromReader);
      msg.addAddrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.AddrBookRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.AddrBookRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.AddrBookRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.AddrBookRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPeerid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.threads.pb.AddrBookRecord.AddrEntry.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.AddrBookRecord.AddrEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.AddrBookRecord.AddrEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.AddrBookRecord.AddrEntry.toObject = function(includeInstance, msg) {
  var obj = {
    addr: msg.getAddr_asB64(),
    expiry: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.AddrBookRecord.AddrEntry}
 */
proto.threads.pb.AddrBookRecord.AddrEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.AddrBookRecord.AddrEntry;
  return proto.threads.pb.AddrBookRecord.AddrEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.AddrBookRecord.AddrEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.AddrBookRecord.AddrEntry}
 */
proto.threads.pb.AddrBookRecord.AddrEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiry(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.AddrBookRecord.AddrEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.AddrBookRecord.AddrEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.AddrBookRecord.AddrEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getExpiry();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional bytes addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.getAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes addr = 1;
 * This is a type-conversion wrapper around `getAddr()`
 * @return {string}
 */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.getAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddr()));
};


/**
 * optional bytes addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddr()`
 * @return {!Uint8Array}
 */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.getAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.setAddr = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 expiry = 2;
 * @return {number}
 */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.getExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.setExpiry = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 ttl = 3;
 * @return {number}
 */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.threads.pb.AddrBookRecord.AddrEntry.prototype.setTtl = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.AddrBookRecord.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.pb.AddrBookRecord.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.AddrBookRecord.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.AddrBookRecord.prototype.setThreadid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes peerID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.AddrBookRecord.prototype.getPeerid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes peerID = 2;
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {string}
 */
proto.threads.pb.AddrBookRecord.prototype.getPeerid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerid()));
};


/**
 * optional bytes peerID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.AddrBookRecord.prototype.getPeerid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.AddrBookRecord.prototype.setPeerid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated AddrEntry addrs = 3;
 * @return {!Array<!proto.threads.pb.AddrBookRecord.AddrEntry>}
 */
proto.threads.pb.AddrBookRecord.prototype.getAddrsList = function() {
  return /** @type{!Array<!proto.threads.pb.AddrBookRecord.AddrEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.AddrBookRecord.AddrEntry, 3));
};


/** @param {!Array<!proto.threads.pb.AddrBookRecord.AddrEntry>} value */
proto.threads.pb.AddrBookRecord.prototype.setAddrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.threads.pb.AddrBookRecord.AddrEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.AddrBookRecord.AddrEntry}
 */
proto.threads.pb.AddrBookRecord.prototype.addAddrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.threads.pb.AddrBookRecord.AddrEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.threads.pb.AddrBookRecord.prototype.clearAddrsList = function() {
  this.setAddrsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.HeadBookRecord.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.HeadBookRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.HeadBookRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.HeadBookRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.HeadBookRecord.toObject = function(includeInstance, msg) {
  var obj = {
    headsList: jspb.Message.toObjectList(msg.getHeadsList(),
    proto.threads.pb.HeadBookRecord.HeadEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.HeadBookRecord}
 */
proto.threads.pb.HeadBookRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.HeadBookRecord;
  return proto.threads.pb.HeadBookRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.HeadBookRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.HeadBookRecord}
 */
proto.threads.pb.HeadBookRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.HeadBookRecord.HeadEntry;
      reader.readMessage(value,proto.threads.pb.HeadBookRecord.HeadEntry.deserializeBinaryFromReader);
      msg.addHeads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.HeadBookRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.HeadBookRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.HeadBookRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.HeadBookRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.threads.pb.HeadBookRecord.HeadEntry.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.HeadBookRecord.HeadEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.HeadBookRecord.HeadEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.HeadBookRecord.HeadEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.HeadBookRecord.HeadEntry.toObject = function(includeInstance, msg) {
  var obj = {
    cid: msg.getCid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.HeadBookRecord.HeadEntry}
 */
proto.threads.pb.HeadBookRecord.HeadEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.HeadBookRecord.HeadEntry;
  return proto.threads.pb.HeadBookRecord.HeadEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.HeadBookRecord.HeadEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.HeadBookRecord.HeadEntry}
 */
proto.threads.pb.HeadBookRecord.HeadEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.HeadBookRecord.HeadEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.HeadBookRecord.HeadEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.HeadBookRecord.HeadEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.HeadBookRecord.HeadEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.HeadBookRecord.HeadEntry.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.threads.pb.HeadBookRecord.HeadEntry.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.HeadBookRecord.HeadEntry.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/** @param {!(string|Uint8Array)} value */
proto.threads.pb.HeadBookRecord.HeadEntry.prototype.setCid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated HeadEntry heads = 1;
 * @return {!Array<!proto.threads.pb.HeadBookRecord.HeadEntry>}
 */
proto.threads.pb.HeadBookRecord.prototype.getHeadsList = function() {
  return /** @type{!Array<!proto.threads.pb.HeadBookRecord.HeadEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.HeadBookRecord.HeadEntry, 1));
};


/** @param {!Array<!proto.threads.pb.HeadBookRecord.HeadEntry>} value */
proto.threads.pb.HeadBookRecord.prototype.setHeadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.threads.pb.HeadBookRecord.HeadEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.HeadBookRecord.HeadEntry}
 */
proto.threads.pb.HeadBookRecord.prototype.addHeads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.threads.pb.HeadBookRecord.HeadEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.threads.pb.HeadBookRecord.prototype.clearHeadsList = function() {
  this.setHeadsList([]);
};


goog.object.extend(exports, proto.threads.pb);
